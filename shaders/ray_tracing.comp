#version 450 core

layout(local_size_x = 32, local_size_y = 32) in;

#define FLOAT_MAX 10000000.0
#define FLOAT_MIN -10000000.0
#define PI 3.1415926535897
#define InvPI 0.318309886183
#define ShadowEpsilon 0.0001

struct Vertex {
	vec3 position;
	vec3 normal;
	vec3 tangent;
	vec3 bitangent;
	vec2 texcoord;
};

struct Material {
	vec3 emssive;
	vec3 baseColor;
	float subsurface, metallic, specular;
	float specularTint, roughness, anisotropic;
	float sheen, sheenTint, clearcoat;
	float clearcoatGloss, IOR, transmission;
};

struct Bound {
	vec3 pMin;
	vec3 pMax;
};

struct Triangle {
	ivec3 indices;
	int materialId;
	int textureId;
	float area;
};

struct BVHNode {
	Bound bound;
	int axis;
	int rightChild;
	int startIndex;
	int endIndex;
};


struct Ray {
	vec3 origin;
	vec3 dir;
	float tMax;
};

struct Light {
	int index; 
	float prefixArea; 
};

struct Interaction {
	vec3 position;
	vec3 normal;
	vec2 texcoord;
	int materialId;
	int textureId;
	float time;
};

struct Camera{
	vec3 eye;
	vec3 lowerLeftCorner;
	vec3 horizontal;
	vec3 vertical;
};

#define VERTEX_VEC3_COUNT 5
#define MATERIAL_VEC3_COUNT 6
#define TRIANGLE_VEC3_COUNT 2
#define BVHNODE_VEC3_COUNT 4
#define LIGHT_VEC3_COUNT 1

layout(binding = 0, rgba32f) uniform image2D output_image;
layout(binding = 29) uniform sampler2D HDRImage;
layout(binding = 30) uniform sampler2D RandomHDR;
uniform int HDRImageWidth;
uniform int HDRImageHeight;
uniform int HasHDRImage;

layout(binding = 0) uniform samplerBuffer vertices;
layout(binding = 1) uniform sampler1D materials;
layout(binding = 2) uniform samplerBuffer triangles;
layout(binding = 3) uniform samplerBuffer bvh_nodes;
layout(binding = 4) uniform samplerBuffer lights;
uniform int lightsSize; // lights元素个数
uniform float lightsSumArea; // lights表面积总和

uniform sampler2D textures[20]; // 物体纹理

ivec2 imagePos;
int bounce;

Vertex GetVertex(int i) {
	int offset = i * VERTEX_VEC3_COUNT;
	Vertex vertex;
	vertex.position  = texelFetch(vertices, offset + 0).rgb;
	vertex.normal    = texelFetch(vertices, offset + 1).rgb;
	vertex.tangent   = texelFetch(vertices, offset + 2).rgb;
	vertex.bitangent = texelFetch(vertices, offset + 3).rgb;
	vertex.texcoord  = texelFetch(vertices, offset + 4).rg;
	return vertex;
}
vec3 GetVertexPosition(int i) {
	int offset = i * VERTEX_VEC3_COUNT;
	return texelFetch(vertices, offset + 0).rgb;
}

vec3 GetVertexNormal(int i) {
	int offset = i * VERTEX_VEC3_COUNT;
	return texelFetch(vertices, offset + 1).rgb;
}

Material GetMaterial(int i) {
	int offset = i * MATERIAL_VEC3_COUNT;
	Material material;
	material.emssive   = texelFetch(materials, offset + 0, 0).rgb;
	material.baseColor = texelFetch(materials, offset + 1, 0).rgb;
	vec3 param1		   = texelFetch(materials, offset + 2, 0).rgb;
	material.subsurface = param1[0];
	material.metallic = param1[1];
	material.specular = param1[2];
	vec3 param2        = texelFetch(materials, offset + 3, 0).rgb;
	material.specularTint = param2[0];
	material.roughness = param2[1];
	material.anisotropic = param2[2];
	vec3 param3        = texelFetch(materials, offset + 4, 0).rgb;
	material.sheen = param3[0];
	material.sheenTint = param3[1];
	material.clearcoat = param3[2];
	vec3 param4        = texelFetch(materials, offset + 5, 0).rgb;
	material.clearcoatGloss = param3[0];
	material.IOR = param3[1];
	material.transmission = param3[2];
	return material;
}

Triangle GetTriangle(int i) {
	int offset = i * TRIANGLE_VEC3_COUNT;
	Triangle tri;
	tri.indices  = ivec3(texelFetch(triangles, offset + 0).rgb);
	vec3 param   = texelFetch(triangles, offset + 1).rgb;
	tri.materialId = int(param[0]);
	tri.textureId  = int(param[1]);
	tri.area  = param[2];
	return tri;
}

BVHNode GetBVHNode(int i) {
	int offset = i * BVHNODE_VEC3_COUNT;
	BVHNode node;
	node.bound.pMin = texelFetch(bvh_nodes, offset + 0).rgb;
	node.bound.pMax = texelFetch(bvh_nodes, offset + 1).rgb;
	vec3 param1     = texelFetch(bvh_nodes, offset + 2).rgb;
	node.axis = int(param1[0]);
	node.rightChild = int(param1[1]);
	node.startIndex = int(param1[2]);
	vec3 param2     = texelFetch(bvh_nodes, offset + 3).rgb;
	node.endIndex = int(param2[0]);
	return node;
}

Light GetLight(int i) {
	int offset = i * LIGHT_VEC3_COUNT;
	Light l;
	vec3 param = texelFetch(lights, offset + 0).rgb;
	l.index = int(param[0]);
	l.prefixArea = param[1];
	return l;
}

// 将三维向量direction转为HDR的纹理坐标uv
const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 toSphericalCoord(vec3 v) {
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
	uv.y = 1.0 - uv.y;
    return uv;
}

vec3 GetHDRImageColor(vec3 v) {
	vec2 uv = toSphericalCoord(v);
	return texture2D(HDRImage, uv).rgb;
}

uniform mat4 ScreenToWorld;
uniform vec3 CameraEye;
uniform int SCREEN_WIDTH;
uniform int SCREEN_HEIGHT;
uniform Camera camera;

layout(binding = 1) buffer debug_output{
	float debug_data[];
};

Ray CameraGetRay(float s, float t) {
	Ray ray;
	ray.origin = camera.eye;
	ray.dir = normalize(camera.lowerLeftCorner + s * camera.horizontal + t * camera.vertical - camera.eye);
	ray.tMax = FLOAT_MAX;
	return ray;
}

bool BoundIntersect(in Bound bound, in Ray ray) {
	vec3 invdir = 1.0 / ray.dir;

    vec3 f = (bound.pMax - ray.origin) * invdir;
    vec3 n = (bound.pMin - ray.origin) * invdir;
	/* 
		各个分量最早离开包围盒的时刻为光线离开包围盒的时刻
		各个分量最晚进入包围盒的时刻为光线进入包围盒的时刻
	*/
    vec3 tmax = max(f, n);
    vec3 tmin = min(f, n);
    float t1 = min(tmax.x, min(tmax.y, tmax.z));
    float t0 = max(tmin.x, max(tmin.y, tmin.z));

    return (t1 >= t0) ? true : false;
}

void swap(inout float f1, inout float f2) {
	float t = f1;
	f1 = f2;
	f2 = t;
}

// 输入随机数u[0, 1], 根据u和灯的表面积的一维分布选出灯光
int GetLightIndex(float u) {
	if (lightsSize == 0) return -1;
	int L = 0, R = lightsSize - 1, ans = -1;
	float randomArea = u * lightsSumArea;
	while (L <= R) { 
		int mid = L + R >> 1;
		if (GetLight(mid).prefixArea >= randomArea) {
			ans = mid;
			R = mid - 1;
		} else {
			L = mid + 1;
		}
	}
	return GetLight(ans).index;
}

// PBRT3中的三角形求交方法
bool TriangleIntersect(in Triangle tri, inout Ray ray, out Interaction isect) {
	const Vertex v0 = GetVertex(tri.indices[0]);
	const Vertex v1 = GetVertex(tri.indices[1]);
	const Vertex v2 = GetVertex(tri.indices[2]);

	vec3 p0 = v0.position;
	vec3 p1 = v1.position;
	vec3 p2 = v2.position;

	// 变换坐标系：光线原点在(0, 0, 0), 方向指向+z轴
	vec3 P0 = p0 - ray.origin;
	vec3 P1 = p1 - ray.origin;
	vec3 P2 = p2 - ray.origin;
	vec3 rd = ray.dir;
	// 光线z方向为0，选取另外两个最长的轴进行交换
	if (rd.z == 0) {
		if (abs(rd.x) > abs(rd.y)) {
			swap(P0.x, P0.z);
			swap(P1.x, P1.z);
			swap(P2.x, P2.z);
			swap(rd.x, rd.z);
		}
		else {
			swap(P0.y, P0.z);
			swap(P1.y, P1.z);
			swap(P2.y, P2.z);
			swap(rd.y, rd.z);
		}
	}
	// 错切变换，射线方向与+z轴对齐
	float invDz = 1.f / rd.z;
	P0.x = P0.x - P0.z * rd.x * invDz;
	P0.y = P0.y - P0.z * rd.y * invDz;
	P0.z *= invDz;
	P1.x = P1.x - P1.z * rd.x * invDz;
	P1.y = P1.y - P1.z * rd.y * invDz;
	P1.z *= invDz;
	P2.x = P2.x - P2.z * rd.x * invDz;
	P2.y = P2.y - P2.z * rd.y * invDz;
	P2.z *= invDz;

	// 边函数：由 p0 和 p1以及给定的第三点p指定的三角形面积的两倍
	float e0 = P1.x * P2.y - P1.y * P2.x;
	float e1 = P2.x * P0.y - P2.y * P0.x;
	float e2 = P0.x * P1.y - P0.y * P1.x;
	// 交点落在三角形外
	if ((e0 < 0 || e1 < 0 || e2 < 0) && (e0 > 0 || e1 > 0 || e2 > 0)) {
		return false;
	}

	// 交点落在三角形外
	if ((e0 < 0 || e1 < 0 || e2 < 0) && (e0 > 0 || e1 > 0 || e2 > 0)) return false;

	// 三角形三点共线
	float det = e0 + e1 + e2;
	if (det == 0) return false;

	/* 
		重心坐标：bi = ei / (e0 + e1 + e2) = bi / det
		插值后z = simga(bi * zi) = sigma(ei * zi) / det
		避免除法误差 判断z在光线范围内用sigma(ei * zi)与ray.tMax * det进行比较
	*/
	float tScaled = e0 * P0.z + e1 * P1.z + e2 * P2.z;
	if (det > 0 && (tScaled <= 0 || tScaled > ray.tMax * det)) return false;
	if (det < 0 && (tScaled >= 0 || tScaled < ray.tMax * det)) return false;

	// 重心坐标
	float invDet = 1.f / det;
	float t = tScaled * invDet;
	float b0 = e0 * invDet;
	float b1 = e1 * invDet;
	float b2 = e2 * invDet;
	
	vec2 uv0 = v0.texcoord;
	vec2 uv1 = v1.texcoord;
	vec2 uv2 = v2.texcoord;
	vec2 uvHit = uv0 * b0 + uv1 * b1 + uv2 * b2;

	vec3 normal0 = v0.normal;
	vec3 normal1 = v1.normal;
	vec3 normal2 = v2.normal;
	vec3 nHit;
	
	// 该三角形不存在法线
	if (normal0 == vec3(0) || normal1 == vec3(0) || normal2 == vec3(0)) {
		nHit = normalize(cross(p1 - p0, p2 - p0));
	} else {
		nHit = normal0 * b0 + normal1 * b1 + normal2 * b2;
	}

	// 光线击中三角形背面，需要反转法线
	if (dot(nHit, ray.dir) > 0) {
		nHit = -nHit;
	}
	nHit = normalize(nHit);
	isect.position = b0 * p0 + b1 * p1 + b2 * p2;
	isect.normal = nHit;
	isect.texcoord = uvHit;
	isect.textureId = tri.textureId;
	isect.materialId = tri.materialId;
	isect.time = t;
	ray.tMax = t; // 更新光线时间范围
	return true;
}

// 只进行相交测试
bool TriangleIntersectP(in Triangle tri, in Ray ray) {
	const Vertex v0 = GetVertex(tri.indices[0]);
	const Vertex v1 = GetVertex(tri.indices[1]);
	const Vertex v2 = GetVertex(tri.indices[2]);

	vec3 p0 = v0.position;
	vec3 p1 = v1.position;
	vec3 p2 = v2.position;

	// 变换坐标系：光线原点在(0, 0, 0), 方向指向+z轴
	vec3 P0 = p0 - ray.origin;
	vec3 P1 = p1 - ray.origin;
	vec3 P2 = p2 - ray.origin;
	vec3 rd = ray.dir;
	// 光线z方向为0，选取另外两个最长的轴进行交换
	if (rd.z == 0) {
		if (abs(rd.x) > abs(rd.y)) {
			swap(P0.x, P0.z);
			swap(P1.x, P1.z);
			swap(P2.x, P2.z);
			swap(rd.x, rd.z);
		}
		else {
			swap(P0.y, P0.z);
			swap(P1.y, P1.z);
			swap(P2.y, P2.z);
			swap(rd.y, rd.z);
		}
	}
	// 错切变换，射线方向与+z轴对齐
	float invDz = 1.f / rd.z;
	P0.x = P0.x - P0.z * rd.x * invDz;
	P0.y = P0.y - P0.z * rd.y * invDz;
	P0.z *= invDz;
	P1.x = P1.x - P1.z * rd.x * invDz;
	P1.y = P1.y - P1.z * rd.y * invDz;
	P1.z *= invDz;
	P2.x = P2.x - P2.z * rd.x * invDz;
	P2.y = P2.y - P2.z * rd.y * invDz;
	P2.z *= invDz;

	// 边函数：由 p0 和 p1以及给定的第三点p指定的三角形面积的两倍
	float e0 = P1.x * P2.y - P1.y * P2.x;
	float e1 = P2.x * P0.y - P2.y * P0.x;
	float e2 = P0.x * P1.y - P0.y * P1.x;
	// 交点落在三角形外
	if ((e0 < 0 || e1 < 0 || e2 < 0) && (e0 > 0 || e1 > 0 || e2 > 0)) {
		return false;
	}

	// 交点落在三角形外
	if ((e0 < 0 || e1 < 0 || e2 < 0) && (e0 > 0 || e1 > 0 || e2 > 0)) return false;

	// 三角形三点共线
	float det = e0 + e1 + e2;
	if (det == 0) return false;

	/* 
		重心坐标：bi = ei / (e0 + e1 + e2) = bi / det
		插值后z = simga(bi * zi) = sigma(ei * zi) / det
		避免除法误差 判断z在光线范围内用sigma(ei * zi)与ray.tMax * det进行比较
	*/
	float tScaled = e0 * P0.z + e1 * P1.z + e2 * P2.z;
	if (det > 0 && (tScaled <= 0 || tScaled > ray.tMax * det)) return false;
	if (det < 0 && (tScaled >= 0 || tScaled < ray.tMax * det)) return false;

	return true;
}

bool BVHIntersect(inout Ray r, out Interaction isect) {
	// 把将要访问的节点压入栈中
	int nodeStack[128], top = 0;
	nodeStack[top++] = 0;
	// 判断击中标志
	bool hit = false;
	while (top > 0) {
		const int curId = nodeStack[--top];
		const BVHNode node = GetBVHNode(curId);
		// 未击中该点包围盒则跳过
		if (!BoundIntersect(node.bound, r)) continue;
		if (node.rightChild == -1) { // 叶子节点
			for (int i = node.startIndex; i < node.endIndex; ++i) { // 每个三角形求交
				if (TriangleIntersect(GetTriangle(i), r, isect)) {
					hit = true;
				}
			}
		} else { // 非叶子节点
			// 在划分轴上光线方向为负方向，则需要先访问右儿子
			if (r.dir[node.axis] < 0) {
				nodeStack[top++] = curId + 1;
				// 判断是否击中另一个儿子的包围盒
				BVHNode rc = GetBVHNode(node.rightChild);
				if (BoundIntersect(rc.bound, r)) nodeStack[top++] = node.rightChild;
			} else {
				nodeStack[top++] = node.rightChild;
				BVHNode lc = GetBVHNode(curId + 1);
				if (BoundIntersect(lc.bound, r)) nodeStack[top++] = curId + 1;
			}
		}
	}
	return hit;
}

// 只进行相交测试
bool BVHIntersectP(inout Ray r) {
	// 把将要访问的节点压入栈中
	int nodeStack[128], top = 0;
	nodeStack[top++] = 0;
	while (top > 0) {
		const int curId = nodeStack[--top];
		const BVHNode node = GetBVHNode(curId);
		// 未击中该点包围盒则跳过
		if (!BoundIntersect(node.bound, r)) continue;
		if (node.rightChild == -1) { // 叶子节点
			for (int i = node.startIndex; i < node.endIndex; ++i) { // 每个三角形求交
				if (TriangleIntersectP(GetTriangle(i), r)) {
					return true;
				}
			}
		} else { // 非叶子节点
			// 在划分轴上光线方向为负方向，则需要先访问右儿子
			if (r.dir[node.axis] < 0) {
				nodeStack[top++] = curId + 1;
				// 判断是否击中另一个儿子的包围盒
				BVHNode rc = GetBVHNode(node.rightChild);
				if (BoundIntersect(rc.bound, r)) nodeStack[top++] = node.rightChild;
			} else {
				nodeStack[top++] = node.rightChild;
				BVHNode lc = GetBVHNode(curId + 1);
				if (BoundIntersect(lc.bound, r)) nodeStack[top++] = curId + 1;
			}
		}
	}
	return false;
}

uniform uint frameCount; // 用已经显示的总帧数和作为当前帧随机数种子
uint seed; // 实际参与运算的种子

uint wang_hash(inout uint seed) { // 迭代更新种子
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}

const uint V[8*32] = {
    2147483648u,1073741824u,536870912u,268435456u,134217728u,67108864u,33554432u,16777216u,8388608u,4194304u,2097152u,1048576u,524288u,262144u,131072u,65536u,32768u,16384u,8192u,4096u,2048u,1024u,512u,256u,128u,64u,32u,16u,8u,4u,2u,1u,2147483648u,3221225472u,2684354560u,4026531840u,2281701376u,3422552064u,2852126720u,4278190080u,2155872256u,3233808384u,2694840320u,4042260480u,2290614272u,3435921408u,2863267840u,4294901760u,2147516416u,3221274624u,2684395520u,4026593280u,2281736192u,3422604288u,2852170240u,4278255360u,2155905152u,3233857728u,2694881440u,4042322160u,2290649224u,3435973836u,2863311530u,4294967295u,2147483648u,3221225472u,1610612736u,2415919104u,3892314112u,1543503872u,2382364672u,3305111552u,1753219072u,2629828608u,3999268864u,1435500544u,2154299392u,3231449088u,1626210304u,2421489664u,3900735488u,1556135936u,2388680704u,3314585600u,1751705600u,2627492864u,4008611328u,1431684352u,2147543168u,3221249216u,1610649184u,2415969680u,3892340840u,1543543964u,2382425838u,3305133397u,2147483648u,3221225472u,536870912u,1342177280u,4160749568u,1946157056u,2717908992u,2466250752u,3632267264u,624951296u,1507852288u,3872391168u,2013790208u,3020685312u,2181169152u,3271884800u,546275328u,1363623936u,4226424832u,1977167872u,2693105664u,2437829632u,3689389568u,635137280u,1484783744u,3846176960u,2044723232u,3067084880u,2148008184u,3222012020u,537002146u,1342505107u,2147483648u,1073741824u,536870912u,2952790016u,4160749568u,3690987520u,2046820352u,2634022912u,1518338048u,801112064u,2707423232u,4038066176u,3666345984u,1875116032u,2170683392u,1085997056u,579305472u,3016343552u,4217741312u,3719483392u,2013407232u,2617981952u,1510979072u,755882752u,2726789248u,4090085440u,3680870432u,1840435376u,2147625208u,1074478300u,537900666u,2953698205u,2147483648u,1073741824u,1610612736u,805306368u,2818572288u,335544320u,2113929216u,3472883712u,2290089984u,3829399552u,3059744768u,1127219200u,3089629184u,4199809024u,3567124480u,1891565568u,394297344u,3988799488u,920674304u,4193267712u,2950604800u,3977188352u,3250028032u,129093376u,2231568512u,2963678272u,4281226848u,432124720u,803643432u,1633613396u,2672665246u,3170194367u,2147483648u,3221225472u,2684354560u,3489660928u,1476395008u,2483027968u,1040187392u,3808428032u,3196059648u,599785472u,505413632u,4077912064u,1182269440u,1736704000u,2017853440u,2221342720u,3329785856u,2810494976u,3628507136u,1416089600u,2658719744u,864310272u,3863387648u,3076993792u,553150080u,272922560u,4167467040u,1148698640u,1719673080u,2009075780u,2149644390u,3222291575u,2147483648u,1073741824u,2684354560u,1342177280u,2281701376u,1946157056u,436207616u,2566914048u,2625634304u,3208642560u,2720006144u,2098200576u,111673344u,2354315264u,3464626176u,4027383808u,2886631424u,3770826752u,1691164672u,3357462528u,1993345024u,3752330240u,873073152u,2870150400u,1700563072u,87021376u,1097028000u,1222351248u,1560027592u,2977959924u,23268898u,437609937u
};

// 格林码 
uint grayCode(uint i) {
	return i ^ (i>>1);
}

// 生成第 d 维度的第 i 个 sobol 数
float sobol(uint d, uint i) {
    uint result = 0;
    uint offset = d * 32;
    for(uint j = 0; i!=0; i >>= 1, j++) 
        if((i & 1)!=0)
            result ^= V[j+offset];

    return float(result) * (1.0f/float(0xFFFFFFFFU));
}
 
float Rand0To1() {
    return float(wang_hash(seed)) / 4294967296.0;
}

// 生成第 i 帧的第 b 次反弹需要的二维随机向量
vec2 sobolVec2(uint i, uint b) {
    float u = sobol(b*2, grayCode(i));
    float v = sobol(b*2+1, grayCode(i));
    return vec2(u, v);
}

vec2 CranleyPattersonRotation(vec2 p) {
    uint pseed = uint(
        uint((imagePos.x) * SCREEN_WIDTH)  * uint(1973) + 
        uint((imagePos.y) * SCREEN_HEIGHT) * uint(9277) + 
        uint(114514/1919) * uint(26699)) | uint(1);
    
    float u = float(wang_hash(pseed)) / 4294967296.0;
    float v = float(wang_hash(pseed)) / 4294967296.0;

    p.x += u;
    if(p.x>1) p.x -= 1;
    if(p.x<0) p.x += 1;

    p.y += v;
    if(p.y>1) p.y -= 1;
    if(p.y<0) p.y += 1;

    return p;
}

// 在环境贴图上重要性采样
vec3 SampleHDRImage(out vec3 L, out float pdf) {
	float r1 = Rand0To1(), r2 = Rand0To1();
	vec3 param = texture2D(RandomHDR, vec2(r1, r2)).rgb;
	param.y = 1.0 - param.y; // flip

	// 根据xy球坐标获取入射方向
	float phi = 2.0 * PI * (param.x - 0.5);
	float theta = PI * (param.y - 0.5);
	L = vec3(cos(theta) * cos(phi), sin(theta), cos(theta) * sin(phi));

	// pdf从2D平面向球坐标进行积分域转换
	pdf = param.z;
	float sinTheta = max(1e-10, sin(theta));
	float convert = float(HDRImageWidth * HDRImageHeight / 2) / (2.0 * PI * PI * sinTheta);
	pdf *= convert;
	return texture(HDRImage, param.xy).rgb;
}

float SampleHDRImagePDF(in vec3 L) {
	vec2 uv = toSphericalCoord(L);

	// pdf从2D平面向球坐标进行积分域转换
	float pdf = texture2D(RandomHDR, uv).b;
	float sinTheta = L.y;
	float convert = float(HDRImageWidth * HDRImageHeight / 2) / (2.0 * PI * PI * sinTheta);
	pdf *= convert;
	return pdf;
}

// 在切线空间下进行单位半球采样
vec3 UniformSampleHemisphere(in vec2 u) {
    float z = u[0];
    float r = sqrt(max(0.f, 1.f - z * z));
    float phi = 2 * PI * u[1];
    return vec3(r * cos(phi), r * sin(phi), z);
}

// 在三角形上采样，返回重心坐标
vec2 UniformSampleTriangle(in vec2 u) {
	float su0 = sqrt(u[0]);
	return vec2(1 - su0, u[1] * su0);
}

// 在三角形上采样，返回采样点信息
Interaction TriangleSample(in Triangle tri, in vec2 u) {
	vec2 b = UniformSampleTriangle(u);
	const vec3 p0 = GetVertexPosition(tri.indices[0]);
	const vec3 p1 = GetVertexPosition(tri.indices[1]);
	const vec3 p2 = GetVertexPosition(tri.indices[2]);
	const vec3 n0 = GetVertexNormal(tri.indices[0]);
	const vec3 n1 = GetVertexNormal(tri.indices[1]);
	const vec3 n2 = GetVertexNormal(tri.indices[2]);
	Interaction res;
	res.position = p0 * b[0] + p1 * b[1] + p2 * (1.f - b[0] - b[1]);
	if (n0 == vec3(0) || n1 == vec3(0) || n2 == vec3(0)) {
		res.normal = normalize(cross(p1 - p0, p2 - p0));
	} else {
		res.normal = n0 * b[0] + n1 * b[1] + n2 * (1.f - b[0] - b[1]);
	}
	res.normal = normalize(res.normal);
	res.texcoord = b;
	res.textureId = tri.textureId;
	res.materialId = tri.materialId;
	return res;
}

float sqr(float x) { return x*x; }

// 根据法线和出射方向建立切线空间
void BuildTangentSpace(in vec3 n, out vec3 t, out vec3 b) {
	// 切线
    if (n.z > 0.9999995f) t = vec3(1.0, 0.0, 0.0);
    else t = normalize(cross(n, vec3(0.0, 0.0, 1.0)));
    b = cross(n, t); // 次切线
}

// 向量v从切线空间转到世界空间
vec3 TangentToWorld(in vec3 t, in vec3 b, in vec3 n, in vec3 v) {
	return v.x * t + v.y * b + v.z * n;
}

// 余弦加权半球采样
vec3 SampleCosineHemisphere(in vec3 n, in vec3 t, in vec3 b) {
	float theta = Rand0To1(), r = Rand0To1();
	float x = r * sin(theta), y = r * cos(theta);
	float z = sqrt(1 - sqr(x) - sqr(y));
	return TangentToWorld(t, b, n, vec3(x, y, z));
}

float SchlickFresnel(float u) {
    float m = clamp(1-u, 0, 1);
    float m2 = m*m;
    return m2*m2*m; // pow(m,5)
}

float GTR1(float NdotH, float a) {
    if (a >= 1) return 1/PI;
    float a2 = a*a;
    float t = 1 + (a2-1)*NdotH*NdotH;
    return (a2-1) / (PI*log(a2)*t);
}

float GTR2(float NdotH, float a) {
    float a2 = a*a;
    float t = 1 + (a2-1)*NdotH*NdotH;
    return a2 / (PI * t*t);
}

float GTR2_aniso(float NdotH, float HdotX, float HdotY, float ax, float ay) {
    return 1 / (PI * ax*ay * sqr( sqr(HdotX/ax) + sqr(HdotY/ay) + NdotH*NdotH ));
}

float smithG_GGX(float NdotV, float alphaG) {
    float a = alphaG*alphaG;
    float b = NdotV*NdotV;
    return 1 / (NdotV + sqrt(a + b - a*b));
}

float smithG_GGX_aniso(float NdotV, float VdotX, float VdotY, float ax, float ay) {
    return 1 / (NdotV + sqrt( sqr(VdotX*ax) + sqr(VdotY*ay) + sqr(NdotV) ));
}

vec3 mon2lin(vec3 x) {
    return vec3(pow(x[0], 2.2), pow(x[1], 2.2), pow(x[2], 2.2));
}

// DisneyBRDF镜面反射重要性采样
vec3 SampleGTR2(in vec3 n, in vec3 t, in vec3 b, in vec3 v, in float r1, in float r2, in float alpha) {
	float phiH = 2.0 * PI * r1;
	float cosThetaH = sqrt((1.0 - r2) / (1.0 + (alpha * alpha - 1.0) * r2));
	float sinThetaH = max(0.0, 1.0 - sqr(cosThetaH));
	float sinPhiH = sin(phiH), cosPhiH = 1.0 - sqr(sinPhiH);
	vec3 h = vec3(sinThetaH * cosPhiH, sinThetaH * sinPhiH, cosThetaH);
	h = TangentToWorld(t, b, n, h);
	return 2 * dot(v, h) * h - v;
}

// DisneyBRDF清漆重要性采样
vec3 SampleGTR1(in vec3 n, in vec3 t, in vec3 b, in vec3 v, in float r1, in float r2, in float alpha) {
	float phiH = 2.0 * PI * r1;
	float cosThetaH = sqrt((1.0 - pow(alpha * alpha, 1.0 - r2)) / (1.0 - alpha * alpha));
	float sinThetaH = max(0.0, 1.0 - sqr(cosThetaH));
	float sinPhiH = sin(phiH), cosPhiH = 1.0 - sqr(sinPhiH);
	vec3 h = vec3(sinThetaH * cosPhiH, sinThetaH * sinPhiH, cosThetaH);
	h = TangentToWorld(t, b, n, h);
	vec3 l = 2 * dot(v, h) * h - v;
	return l;
}


float SampleDisneyPDF(vec3 V, vec3 N, vec3 L, in Material material) {
	/*
		DisneyBRDF存在漫反射，镜面反射，清漆三种BRDF项，
		根据三种BRDF项的能量贡献随机选取一项进行采样
	*/
	float rDiffuse = (1.0 - material.metallic);
	float rSpecular = 1.0;
	float rClearcoat = 0.25 * material.clearcoat;
	float invSum = 1.0 / (rDiffuse + rSpecular + rClearcoat);

	float pDiffuse = rDiffuse * invSum;
	float pSpecular = rSpecular * invSum;
	float pClearcoat = rClearcoat * invSum;
	float alphaGTR1 = mix(0.1, 0.001, material.clearcoatGloss);
	float alphaGTR2 = max(0.001, sqr(material.roughness));
	/*
		分别计算L在三种BRDF采样下的概率密度，
		再根据能量贡献进行加权平均
	*/
	vec3 H = normalize(L + V);
	float LdotH = dot(L, H);
	float NdotH = dot(N, H);
	float NdotL = dot(N, L);

	float pdfDiffuse = NdotL * InvPI;
	float pdfSpecular =  GTR2(NdotH, alphaGTR2) * NdotH / (4.0 * LdotH);
	float pdfClearcoat = GTR1(NdotH, alphaGTR1) * NdotH / (4.0 * LdotH);

	return pDiffuse * pdfDiffuse + pSpecular * pdfSpecular + pClearcoat * pdfClearcoat;
}

// DisneyBRDF重要性采样
vec3 SampleDisneyBRDF(in vec3 V, in vec3 N, in vec3 T, in vec3 B, in Material material, 
	in float r1, in float r2, out float pdf) {
	/*
		DisneyBRDF存在漫反射，镜面反射，清漆三种BRDF项，
		根据三种BRDF项的能量贡献随机选取一项进行采样
	*/
	float rDiffuse = (1.0 - material.metallic);
	float rSpecular = 1.0;
	float rClearcoat = 0.25 * material.clearcoat;
	float invSum = 1.0 / (rDiffuse + rSpecular + rClearcoat);

	float pDiffuse = rDiffuse * invSum;
	float pSpecular = rSpecular * invSum;
	float pClearcoat = rClearcoat * invSum;

	float r = Rand0To1();

	float alphaGTR1 = mix(0.1, 0.001, material.clearcoatGloss);
	float alphaGTR2 = max(0.001, sqr(material.roughness));

	vec3 L;
	if (r <= pDiffuse) {
		L = SampleCosineHemisphere(N, T, B);
	} else if (r <= pDiffuse + pSpecular) {
		L = SampleGTR2(N, T, B, V, r1, r2, alphaGTR2);
	} else {
		L = SampleGTR1(N, T, B, V, r1, r2, alphaGTR1);
	}

	/*
		分别计算L在三种BRDF采样下的概率密度，
		再根据能量贡献进行加权平均
	*/
	vec3 H = normalize(L + V);
	float LdotH = dot(L, H);
	float NdotH = dot(N, H);
	float NdotL = dot(N, L);

	float pdfDiffuse = NdotL * InvPI;
	float pdfSpecular =  GTR2(NdotH, alphaGTR2) * NdotH / (4.0 * LdotH);
	float pdfClearcoat = GTR1(NdotH, alphaGTR1) * NdotH / (4.0 * LdotH);

	pdf = pDiffuse * pdfDiffuse + pSpecular * pdfSpecular + pClearcoat * pdfClearcoat;
	return L;
}

vec3 DisneyBRDF(vec3 V, vec3 N, vec3 L, vec3 X, vec3 Y, Material material) {
	float NdotL = dot(N, L);
    float NdotV = dot(N, V);
    if(NdotL < 0 || NdotV < 0) return vec3(0);

    vec3 H = normalize(L + V);
    float NdotH = dot(N, H);
    float LdotH = dot(L, H);

    // 各种颜色
    vec3 Cdlin = material.baseColor;
    float Cdlum = 0.3 * Cdlin.r + 0.6 * Cdlin.g  + 0.1 * Cdlin.b;
    vec3 Ctint = (Cdlum > 0) ? (Cdlin/Cdlum) : (vec3(1));   
    vec3 Cspec = material.specular * mix(vec3(1), Ctint, material.specularTint);
    vec3 Cspec0 = mix(0.08*Cspec, Cdlin, material.metallic); // 0° 镜面反射颜色
    vec3 Csheen = mix(vec3(1), Ctint, material.sheenTint);   // 织物颜色

    // 漫反射
    float Fd90 = 0.5 + 2.0 * LdotH * LdotH * material.roughness;
    float FL = SchlickFresnel(NdotL);
    float FV = SchlickFresnel(NdotV);
    float Fd = mix(1.0, Fd90, FL) * mix(1.0, Fd90, FV);

    // 次表面散射
    float Fss90 = LdotH * LdotH * material.roughness;
    float Fss = mix(1.0, Fss90, FL) * mix(1.0, Fss90, FV);
    float ss = 1.25 * (Fss * (1.0 / (NdotL + NdotV) - 0.5) + 0.5);

     
    // 镜面反射 -- 各向同性
    /*float alpha = max(0.001, material.roughness * material.roughness);
    float Ds = GTR2(NdotH, alpha);
    float FH = SchlickFresnel(LdotH);
    vec3 Fs = mix(Cspec0, vec3(1), FH);
    float Gs = smithG_GGX(NdotL, material.roughness);
    Gs *= smithG_GGX(NdotV, material.roughness);*/
    
    // 镜面反射 -- 各向异性
    float aspect = sqrt(1.0 - material.anisotropic * 0.9);
    float ax = max(0.001, sqr(material.roughness)/aspect);
    float ay = max(0.001, sqr(material.roughness)*aspect);
    float Ds = GTR2_aniso(NdotH, dot(H, X), dot(H, Y), ax, ay);
    float FH = SchlickFresnel(LdotH);
    vec3 Fs = mix(Cspec0, vec3(1), FH);
    float Gs;
    Gs  = smithG_GGX_aniso(NdotL, dot(L, X), dot(L, Y), ax, ay);
    Gs *= smithG_GGX_aniso(NdotV, dot(V, X), dot(V, Y), ax, ay);

    // 清漆
    float Dr = GTR1(NdotH, mix(0.1, 0.001, material.clearcoatGloss));
    float Fr = mix(0.04, 1.0, FH);
    float Gr = smithG_GGX(NdotL, 0.25) * smithG_GGX(NdotV, 0.25);

    // sheen
    vec3 Fsheen = FH * material.sheen * Csheen;
    
    vec3 diffuse = (1.0/PI) * mix(Fd, ss, material.subsurface) * Cdlin + Fsheen;
    vec3 specular = Gs * Fs * Ds;
    vec3 clearcoat = vec3(0.25 * Gr * Fr * Dr * material.clearcoat);

    return diffuse * (1.0 - material.metallic) + specular + clearcoat;
}

struct BounceLi {
	vec3 Li;
	vec3 f;
	float cosTheta;
	float pdf;
	float pR;
};

uniform int MAX_BOUNCE_DEPTH;

vec3 PathTracing(Interaction isect, vec3 V) {
	vec3 Lo = vec3(0.0);
	vec3 c = vec3(1.0); // 第i次弹射光照的累计权重

	for (bounce = 0; bounce < MAX_BOUNCE_DEPTH; ++bounce) {
		vec3 P = isect.position;
		vec3 N = isect.normal;
		
		Material material = GetMaterial(isect.materialId);
		if (isect.textureId != -1) { // 将材质baseColor修改为纹理颜色
			material.baseColor = texture(textures[isect.textureId], isect.texcoord).rgb;
		}
		// 建立切线空间
		vec3 T, B;
		BuildTangentSpace(N, T, B);

		// 灯光的直接光照
		vec3 LDirect = vec3(0.0);
		float lightPDF = 0.0;
		int triIndex = GetLightIndex(Rand0To1());
		if (triIndex != -1) { // 找到其中一个灯光
			// 在该三角形上采样
			const Triangle tri = GetTriangle(triIndex);
			Interaction triangleIsect = TriangleSample(tri, vec2(Rand0To1(), Rand0To1()));
			// 发射阴影射线，判断灯光与当前点之间有无遮挡
			Ray r;
			r.dir = triangleIsect.position - P;
			r.tMax = 1.0 - ShadowEpsilon; // 防止光线与目标物体相交
			r.origin = P + N * 0.0001; // 防止自相交
			if (!BVHIntersectP(r)) {
				float dis2 = r.dir.x * r.dir.x + r.dir.y * r.dir.y + r.dir.z * r.dir.z;
				vec3 lightL = normalize(r.dir);
				lightPDF = (dis2) / (abs(dot(triangleIsect.normal, -lightL)) * lightsSumArea);
				vec3 li = GetMaterial(triangleIsect.materialId).emssive;
				// 针对灯光方向计算的brdf
				vec3 lightBRDF = DisneyBRDF(V, N, lightL, T, B, material);
				if (imagePos == ivec2(500, 100) && bounce == 0) {
					debug_data[7] = lightPDF;
					debug_data[8] = lightBRDF[0];
					debug_data[9] = lightBRDF[1];
					debug_data[10] = lightBRDF[2];
					debug_data[11] = li[0];
					debug_data[12] = li[1];
					debug_data[13] = li[2];
					debug_data[14] = abs(dot(N, lightL));
				}
				LDirect = lightBRDF * li * abs(dot(N, lightL)) / lightPDF;
			}
		}

		vec3 LEnvironment = vec3(0.0);
		float enPDF = 0.0;
		// 来自环境贴图的光照
		if (HasHDRImage == 1) {
			vec3 enL;
			vec3 enLi = SampleHDRImage(enL, enPDF);
			Ray enR;
			enR.origin = P;
			enR.dir = enL;
			enR.tMax = FLOAT_MAX;
			// 判断贴图与当前点之间有无遮挡
			if (dot(enL, N) > 0 && !BVHIntersectP(enR)) { 
				vec3 dBRDF = DisneyBRDF(V, N, enL, T, B, material);
				LEnvironment = dBRDF * enLi * dot(enL, N) / enPDF;
			}
		}

		vec2 uv = sobolVec2(frameCount + 1, bounce);
		uv = CranleyPattersonRotation(uv);
		// 随机采样入射光L作为下一次光线方向
		float dPDF;
		vec3 L = SampleDisneyBRDF(V, N, T, B, material, uv.x, uv.y, dPDF);
		vec3 dBRDF = DisneyBRDF(V, N, L, T, B, material);
		float NdotL = abs(dot(N, L));

		// 多重重要性采样
		float invPDFSum = 1.f / (enPDF + lightPDF + dPDF);
		Lo += c * (LEnvironment * enPDF + LDirect * lightPDF) * invPDFSum; 
		//c *= dPDF * invPDFSum;
		if (imagePos == ivec2(100, 500) && bounce == 1) {
			debug_data[0] = enPDF;
			debug_data[1] = lightPDF;
			debug_data[2] = dPDF;
			debug_data[3] = c[0];
			debug_data[4] = c[1];
			debug_data[5] = c[2];
			debug_data[6] = invPDFSum;
		}

		Ray ray;
		ray.origin = P + N * 0.0001f;
		ray.dir = L;
		ray.tMax = FLOAT_MAX;
		
		// 计算下一次弹射到的交点
		if (!BVHIntersect(ray, isect)) {
			if (HasHDRImage == 1) {
				vec3 enL = normalize(ray.dir);
				vec3 enLi =	GetHDRImageColor(enL);				
				Lo += c * enLi * dBRDF * NdotL / dPDF;
			}
			return Lo;
		}

		// 自发光
		Lo += c * GetMaterial(isect.materialId).emssive * dBRDF * NdotL / dPDF;

		c *= dBRDF * NdotL / dPDF;
		V = -ray.dir;
	}
	return Lo;
}

uniform int redraw;
void main() {
	imagePos = ivec2(gl_GlobalInvocationID.xy);
	seed = uint(uint(imagePos.x) * uint(1973) + 
				uint(imagePos.y) * uint(9277) + 
				uint(frameCount) * uint(26699)) | uint(1); // 初始化种子
	Ray ray = CameraGetRay(float(imagePos.x) / float(SCREEN_WIDTH), float(imagePos.y) / float(SCREEN_HEIGHT));
	Interaction isect;
	vec3 color;
	if (!BVHIntersect(ray, isect)) {
		color = GetHDRImageColor(ray.dir);
	} else {
		color = GetMaterial(isect.materialId).emssive + PathTracing(isect, -ray.dir);
	}
	color = clamp(color, vec3(0), vec3(1));
	// 多帧混合
	vec3 preColor = imageLoad(output_image, imagePos).rgb;
	imageStore(output_image, imagePos, vec4(mix(preColor, color, 1.0 / float(frameCount + 1)), 1.0));
}